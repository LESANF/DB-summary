< 마당서적 테이블을 기준으로 한다. >

(1) 박지성이 구매한 도서의 출판사와 같은 출판사에서 도서를 구매한 고객의 이름

SELECT DISTINCT name
FROM Customer, Orders, Book
WHERE Customer.custid=Orders.custid 
            AND Orders.bookid=Book.bookid 
            AND publisher IN(SELECT publisher
                                   FROM Customer, Orders, Book
                                   WHERE Customer.custid=Orders.custid AND Orders.bookid=Book.bookid AND Customer.name Like '박지성');


풀이) 

WHERE절에서 Customer.custid=Orders.custid AND Orders.bookid=Book.bookid 해당 구문은 세 개의 테이블을 이어주는 역할이다.
Customer와 Book테이블은 서로 공통되는 속성(Column)이 없으므로, Orders의 속성을 참조해야한다.

그리고 publisher IN() 이란 publisher의 투플중 ()안에 해당되는 요소와 매칭된 투플만 뽑아내는 행위이다.

문제의 중점은 박지성이 구매한 도서의 출판사, 그리고 그 출판사의 책을 구입한 사람의 이름이다.
부속질의를 이용하여 publisher를 SELECT의 요소로 선택하고, 그 중 박지성이라는 이름이 들어간 투플을 LIKE를 통해 뽑아낸다.
박지성이라는 이름이 들어가는 publisher의 목록을 얻을 수 있고 이는 IN의 요소로 들어가 문제를 해결할 수 있다.
----------------------------------------------------------------------------------------------------------------------------------------------------

(2) 두 개 이상의 서로 다른 출판사에서 도서를 구매한 고객의 이름

SELECT name
FROM (SELECT name, publisher
          FROM Customer, Orders, Book
          WHERE Customer.custid=Orders.custid AND Orders.bookid=Book.bookid
          GROUP BY name, publisher)
GROUP BY name
HAVING COUNT(publisher) > 1;


풀이)

GROUP BY와 DISTINCT는 동일한 기능을 가졌지만(중복방지), 다른 연산이다.
DISTINCT는 단순히 UNIQUE값만을 추출하기 위해 사용하는 것이고, GROUP BY는 집계키 기준으로 집합연살을 위해 사용하는 것이다.
집합 연산을 간략하게 짚고 넘어가면 우리가 흔히 잘 알고 잘 사용하고 있는 COUNT(*), SUM(), AVG(), MAX(), MIN()등이 있다.

위와같이 설명을 하고 들어가는 이유는 이문제의 핵심은 GROUP BY에 복수로 적용되는 속성(column)이 있기때문이다.
문제를 쉽게 해석해보면 << 두 개 이상의 도서를 구매한 고객의 이름을 구하는데 조건은 서로 다른출판사가 기준이다 >>

먼저 GROUP BY name, publisher로 중복을 최소화하며 뽑을 수 있는 그룹을 모두 뽑는다.
그 뽑힌 name, publisher로 부터 다시한번 문제에서 필요로하는 고객의 이름을 뽑아내기위해 name으로 그룹화 한다.
이제 name기준으로 다시 그룹화 됐으며, 서로 다른 출판사도 하나의 name안으로 그룹화 된다.

GROUP BY는 항상 집계함수와 써야하고, 여기서 쓰이는 집계함수는 열을 셀 수 있는 COUNT함수다.
COUNT함수로 개수를 세고, 조건인 두 개 이상( x > 1)의 조건을 달면 문제에서 원하는 답을 이끌어 낼 수 있다.
----------------------------------------------------------------------------------------------------------------------------------------------------

(3) 전체 고객의 30% 이상이 구매한 도서

SELECT bookname
FROM customer, orders, book
WHERE  customer.custid=orders.custid AND orders.bookid=book.bookid
GROUP BY bookname
HAVING COUNT(name) > (select COUNT(name) * 0.3 
                                     FROM customer);


풀이)

전체 고객의 30%를 구하는 식은 쉽다. SELECT COUNT(name) * 0.3 FROM customer; 
customer 테이블에 존재하는 사람들(name)을 COUNT해서 0.3(30%)를 연산해주면 된다.

우리가 구해야하는건 조건을 충족하는 도서. 즉 도서의이름 bookname이다.

구매를 조회하기 위해 customer, orders, book 세개의 테이블이 연결되야 하고
도서(bookname)을 기준으로 그룹화 시켜준다.
정답은 '야구를 부탁해', 'Olympic Champions' 인데, 이 도서는 각각 두 명이 구입한적이 있다.

조건의 30%는 계산하면 COUNT된 5명에 30%이므로 1.5의 연산결과가 나온다.
하지만 bookname으로 그룹화된 테이블을 기준으로 COUNT(name)하면 bookname으로 그룹화된 대상들에 대하여
개별적으로 COUNT함수가 적용되면서 위의 두 도서가 2의 결과를 각각 가지게 된다.
----------------------------------------------------------------------------------------------------------------------------------------------------


-- (1) 새로운 도서('스포츠 세계', '대한미디어', 10000원)이 마당서점에 입고되었다. 삽입이 안 될경우 필요한 데이터는 ?
-- (A) Book테이블의 속성=열(Column)은 bookid, bookname, publisher, price다. 
-- INSERT INTO BOOK VALUES(11, '스포츠세계', '대한미디어', 10000); 처럼 속성요소가 빠지면안됨. 속성명은 생략가능. 써도되고 안써도되고.

-- (2) '삼성당'에서 출판한 도서를 삭제하시오.
-- (A) DELETE FROM book WHERE  publisher LIKE '삼성당';

-- (3) '이상미디어'에서 출판한 도서를 삭제하시오. 삭제가 안된다면 삭제한 이유는 ?
-- (A) '삼성당'과 다르게, Book테이블의 '이상미디어'는 Orders 테이블의 속성인 bookid를 참조하고있다.

-- (4) 출판사 '대한미디어'를 '대한출판사'로 이름을 바꿔라.
-- (A) UPDATE book SET publisher = '대한출판사' WHERE publisher LIKE '대한미디어';

-- (5) (테이블 생성) 출판사에 대한 정보를 저장하는 테이블 Bookcompany(name, address, begin)를 생성하고자 한다. 
-- name은 기본키며 VARCHAR(20), address는 VARCHAR(20), begin은 DATE타입으로 선언하여 테이블을 생성하라
-- (A) CREATE TABLE Bookcompany(
--            name VARCHAR(20) PRIMARY KEY,
--            address VARCHAR(20),
--            begin DATE);

-- (6) (테이블 수정) Bookcompany 테이블에 인터넷 주소를 저장하는 webaddress 속성을 VARCHAR(30)으로 추가해라.
-- (A) ALTER TABLE Bookcompany ADD webaddress VARCHAR(30);

-- (7) Bookcompany 테이블에 임의의 투플 name=한빛아카데미, address=서울시 마포구, begin=1993-01-01, webaddress=http://hanbit.co.kr 를 삽입해라.
-- (A) INSERT INTO Bookcompany VALUES('한빛아카데미', '서울시 마포구', 1993-01-01, 'http://hanbit.co.kr');
----------------------------------------------------------------------------------------------------------------------------------------------------

