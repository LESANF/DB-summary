[ SELECT 문 ]

★ 들어가기 앞서 쿼리 실행순서

SELECT          -(5)
 FROM          -(1)
WHERE         -(2)
GROUP BY     -(3)
HAVING        -(4)
ORDER BY      -(6)

< WHERE 조건 >

비교  ( =, <>, <, <=, >, >= )
ex) price > 20000

============================================================================

범위 BETWEEN 
ex) price BETWEEN 10000 AND 20000
BETWEEN은 논리 연산자인 AND를 사용하여 아래와 같이 사용가능
SELECT * FROM BOOK WHERE PRICE >= 10000 AND PRICE <= 20000;

============================================================================

집합 IN, NOT IN 
ex) price IN(10000, 20000, 30000)
범위가 아니라 가격이 정확히 10000, 20000, 30000인 항목을 가져오는것.
price NOT IN(10000, 20000, 30000) 이면 해당 가격과 다른 모든 항목을 가져옴.

============================================================================

패턴 LIKE

/* 와일드 문자란 ? */

( +, %. [ ]. [^], _ ) 를 의미한다.

+ 는 문자열을 연결, '골프 ' + '바이블' : '골프 바이블 (공백도 인식됨)

%는 0개 이상의 문자열과 일치, '%축구%' : 축구를 포함하는 문자열

[ ]는 1개의 문자와 일치, '[0-5]%' : 0-5 사이 숫자로 시작하는 문자열

[^]는 1개의 문자와 불일치, '[^0-5]%' : 0-5 사이 숫자로 시작하지 않는 문자열

_는 특정 위치의 1개의 문자와 일치, '_구%' : 두 번째 위치에 '구'가 들어가는 문자열

ex) 축구, 야구, 배구와 같이 두 번째 글자에 '구'가 들어가는 도서를 찾을 때의 쿼리문
select * from Book where bookname like '_구%';   

ex) bookname LIKE '축구의역사' 
"" 안됨 무조건 영문 작은 따옴표(' ')안에 넣어야함.
(" ") 큰따옴표를 쓰는경우는 별칭(AS) 이름에 공백이 포함되는 경우에 반드시 사용된다.
LIKE는 %(와일드문자)와 같이 사용할 수 있는데, %는 아무 문자열이나 대신하는 기호임.

1. select * from table_name where title like '블로그%'
2. select * from table_name where title like '%블로그'
3. select * from table_name where title like '%블로그%'

1번 구문은 블로그로 시작되는 모든 값을 검색하여 가져오고
2번 구문은 블로그로 끝나는 모든 값을 검색하여 가져오고
3번 구문은 블로그가 들어있는 모든 값을 검색하여 가져옵니다

============================================================================

복합조건 AND, OR, NOT
ex) (price < 20000) AND (bookname LIKE '축구의 역사')
소괄호 안써도 동작함. 구분을 위해 넣는게 좋아보임.

출판사가 '굿스포츠' 혹은 '대한미디어'인 도서를 찾을 때 
select * from book where publisher='굿스포츠' or 'publisher='대한미디어'; 나 where publisher like '%굿스포츠%' or publisher like '%대한미디어%'
로도 가능하지만 앞에서 배운 IN을 사용하면 간결하게 찾을 수 있음. where publisher IN ('굿스포츠', '대한미디어');

============================================================================

ORDER BY
SQL문의 실행 결과 행의 순서는 각 DBMS에 저장된 위치에 따라 결정됨. 
SQL문의 실행결과를 특정 순서대로 출력하고 싶으면 ORDER BY절을 사용한다.

*오름차순(ASC) / 내림차순(DESC) 
따로 설정안해주면 ASC.

문자의 경우 정렬 순서는 숫자, 영문자, 한글 순서임.

ORDER BY price DESC, publisher ASC; 의 경우
가격은 내림차순, 출판사는 오름차순인데 먼저 호출된 price열을 정렬후 동일한 값에 의하여 두번째 publisher열이 처리된다.

============================================================================

GROUP BY
'운영자'가 필요로 하는 질의를 중심으로 SQL의 기능을 살펴본다.
운영자는 도서 판매 총액, 일별 판매량등 도서 판매에 도움이 되는 집계된 정보를 필요로함
집계나 통계나 비슷한 의미지만 집계라는 용어를 사용하는게 낫다.
집계를 하기위해서는 GROUP BY문을 사용하고 구체적인 집계 내용은 집계 함수를 사용함.

/* Oracle NVL, NVL2 함수 */ 
NULL 값을 지정값으로 바꿔주는 함수
https://gent.tistory.com/189

/* ROUND 함수 */
소수점 자리수를 지정하기 위한 함수
https://gent.tistory.com/241

/* 집계 함수 */
집계 함수는 테이블의 각 열(COLUMN)에 대해 계산하는 함수로 (SUM, AVG, MIN, MAX, COUNT)의 다섯 가지가 있음.
WHERE 절에서는 집계함수 사용 못함.

고객이 주문한 도서의 총 판매액을 구할 때
select SUM(saleprice) from Orders; 로 가능함. madang스키마에 Orders테이블이 있음.
이렇게 하면 새로운 SUM(saleprice)로 새로운 결과열이 생성되는데. 
속성의이름 즉 별칭을 지정하기 위해서는 아래와 같이 쓰면됨.
select SUM(saleprice) AS "총매출" from Orders;

마찬가지로 where 절을 부여하여 조건을 달아줄 수 있음.
SELECT SUM(SALEPRICE) AS "총 판매액", AVG(SALEPRICE) AS "평균값", MIN(SALEPRICE) AS "최저가", MAX(SALEPRICE) AS "최고가" FROM Orders
집계 함수를 여러개 같이 쓸 수도 있음.

COUNT는 행(row)의 개수를 센다. COUNT(*), '*' 또는 특정 속성의 이름이 사용된다.
COUNT(publisher)는 출판사의 수, COUNT(DISTINCT publisher)는 중복을 제거한 출판사의 수로 사용된다.
개수를 셀 때는 NULL 값은 제외한다.

문법에서 '[ ]'는 선택을 나타내며 '|'는 둘 중 하나를 선택하라는 의미이다.
함수([ALL | DISTINCT] 속성이름) 이런식으로 사용됨. 전부 OR 중복제거라는 옵션임.

GROUP BY절은 SQL에서 속성 값이 같은 값끼리 그룹을 만들 수 있다.
나누고자 하는 그룹의 컬럼명을 SELECT절과 GROUP BY절 뒤에 추가하면 된다.

GROUP BY절은 ORDER BY절과 같이 쓰일 수 있으며 ORDER BY절 앞에 쓰인다.

select custid, SUM(SALEPRICE) AS "총판매액", COUNT(*) AS "도서수량" from orders GROUP BY custid;
다음은 고객별로 주문한 도서의 총 수량과 총 판매액이다.

COUNT(*)는 튜플(행=ROW)의 개수를 세어주는데, GROUP BY custid되었으므로 
custid를 기준으로 그룹이 만들어져 custid(1, 2, 3, 4)별로 4개의 그룹이 만들어지고 해당 그룹에 대한 도서수량, 총판매액이 부여된다.

HAVING 절은 집계함수를 가지고 조건 비교를 할 때 사용되며, GROUP BY절과 함께 사용된다(WHERE 절에서는 사용할 수 없기 때문에)

SELECT custid, COUNT(*) AS "주문도서"
FROM Orders
WHERE saleprice>=8000
GROUP BY custid
HAVING COUNT(*)>=2
ORDER BY custid

위의 쿼리문은 가격이 8,000원 이상인 도서를 구매한 고객에 대하여 고객별 주문 도서의 총 수량을 구한것이다 (두 권 이상 구매한 고객만)
GROUP BY를 custid기준으로 해줬기 때문에 SELECT문에서는 custid와 집계함수만 나올 수 있다.

WHERE, HAVING을 같이 쓰이는 경우의 주의점은 HAVING은 반드시 GROUP BY와 같이 쓰여야 하고 WHERE 뒤에 위치해야한다. 마지막으로 검색조건 에는 집계함수가 와야함.

============================================================================

카티션 프로덕트(Cartesian produc : X)

두 개의 테이블에서 각각의 행을 서로 결합하여 하나의 행으로 구성하면서 가능한 모든 조합의 행으로 테이블을 만드는 연산
카티션 프로덕트는 모든 가능한 조합에 의해 행을 생성하지만, 조인은 특정 조건을 만족하는 행만 선택한다.
조인은 두 테이블을 카티션 프로덕트를 한 후 그 결과에서 조건식을 만족하는 행을 선택하는 연산

select * from Customer, Orders; 쿼리문처럼 두 테이블에 아무런 조건을 주지 않고 SELECT 시키면 관계대수의 카티전 프로덕트 연산이 된다.


조인(JOIN) 

한 테이블의 행(row)/튜플을 다른 테이블의 행에 연결하여 두 개 이상의 테이블을 결합하는 연산.
자신이 검색하고 싶은 컬럼이 다른 테이블에 있을경우 주로 사용하며 여러개의 테이블을 마치 하나의 테이블인 것처럼 활용하는 방법.
보통 PK(Primary key) 혹은 FK(Foreign key)로 두 테이블을 연결함. 
테이블을 연결하려면 적어도 하나의 컬럼(Column)/속성은 서로 공유되고 있어야 함.

여러 개의 테이블을 연결하여 하나의 테이블을 만드는 과정을 테이블 조인이라고 함.
동등조건에 의하여 테이블을 조인하는 것을 동등조인이라고 하고, 조인이라고 하면 대부분 동등조인이다.

모든 SQL 질의의 결과는 단일 테이블임. 결과 테이블에 SQL 문법을 적용할 수 있다. GROUP BY, ORDER BY를 추가하듯.
세 개 이상의 테이블도 조인이 가능함.

고객의 이름, 도서의 이름을 구하려고 할 때, customer와 book의 테이블로만으로는 JOIN 할 수 없다.
속성이 하나도 겹치는게 없기 때문. orders테이블은 customer와 book에 대해 공통되는 속성을 가지고 있다.
그렇기 때문에 세 개의 테이블을 JOIN하여 결과를 얻을 수 있음.
WHERE Customer.custid=Orders.custid AND Orders.bookid=Book.bookid 

/* 셀프 조인(Self Join) 

셀프 조인은 하나의 테이블(자신)을 대상으로 조인하는 것을 말한다.
하지만 자기 자신과 JOIN하게 되면 속성명이 같아지는 문제가 발생하게 되서 Alias(별칭)을 사용해야한다.
별칭을 주는법은 테이블이나 속성 이름 뒤에 대신 사용할 임시 명칭을 부여하면된다.
ex) FROM EMP STAFF, EMP MANAGER / EMP테이블을 셀프 조인할건데 각각 STAFF, MANAGER로 별칭을 부여한거임.

*/

조인 연산의 특별한 경우로 외부 조인(Outer join)이 있다.

OUTER JOIN은 조인하는 여러테이블에서 한 쪽에는 데이터가 있고, 한 쪽에는 데이터가 없는 경우
데이터가 있는 쪽 테이블의 내용을 모두 출력하는 것이다. 
즉, 조건에 맞지 않아도 해당하는 행을 출력하고 싶을 때 사용할 수 있습니다.

/* LEFT OUTER JOIN

조인문의 왼쪽에 있는 테이블의 모든 결과를 가져 온 후 오른쪽 테이블의 데이터를 매칭하고, 매칭되는 데이터가 없는 경우 NULL로 표시한다.

SELECT 검색할 컬럼
FROM 테이블명 LEFT OUTER JOIN 테이블명2
ON 테이블.컬럼명 = 테이블2.컬럼명;
-------------------------------------------------
SELECT 검색할 컬럼
FROM 테이블명, 테이블명2
WHERE 테이블.컬럼명 = 테이블2.컬럼명(+);

위의 LEFT OUTER JOIN과 (+)를 붙인 Query문은 둘다 같은 결과를 나타낸다.

왼쪽 외부조인일 때 (+) 기호를 조인 조건의 오른쪽에, 오른쪽 외부조인이면 (+)기호를 왼쪽에 붙인다. 
괄호 포함해서 쓰는 기호임 (+)

ex) A LEFT JOIN B 라고 하면 A라는 테이블의 전체 컬럼을 조회한 후 B테이블의 컬럼을 JOIN하겠다는 뜻이다.
그리고 뒤에 붙는 ON조건은 B테이블을 JOIN하는 조건을 기술하는 곳이다.

왼쪽 외부조인은 LEFT OUTER JOIN ... ON으로, 오른쪽 외부조인은 RIGHT OUTER JOIN ... ON
왼쪽과 오른쪽 테이블 모두에 대하여 질의하려면 FULL OUTER JOIN ... ON 을 사용한다.

*/

일반적인 조인(JOIN) 문법으로 두 가지가 있는데

(1) SELECT <속성들> FROM 테이블1, 테이블2 WHERE <조인조건> AND <검색조건>
(2) SELECT <속성들> FROM 테이블1 INNER JOIN 테이블 2 ON <조인조건> WHERE <검색조건>

SQL문에서는 주로 동등조인을 사용하고, 두 가지 문법 중 하나를 사용할 수 있다.

외부 조인의 문법은 다음과 같다.
SELECT <속성들> FROM 테이블1 {LEFT | RIGHT | FULL [OUTER]} JOIN 테이블2 ON <조인조건> WHERE <검색조건>

외부조인은 FROM 절에 조인 종류를 적고 ON을 이용하여 조인조건을 명시한다.

/* 부속질의(subquery)

가격이 가장 비싼 도서의 이름은 무엇인가? 라고 했을 때
SELECT MAX(price) FROM Book; 로 도서의 가장 비싼 가격을 구할 수 있고

이제 가장 비싼 도서의 가격을 알았고, 
SELECT bookname FROM Book WHERE price=35000; 으로 돗의 이름을 바로 검색하면 된다.

위의 두질의를 하나로 합치는 방법이있다.
SELECT bookname FROM book WHERE price = (SELECT MAX(price) FROM Book);

위와 같이 SELECT 문의 WHERE 절에 또 다른 테이블 결과를 이용하기 위해 다시 SELECT문을 괄호로 묶는 것을 부속질의라고 한다.
부속질의는 질의가 중첩되어 있다는 의미에서 중첩질의(nested query)라고도 한다.
순서 역시 WHERE 절의 부속질의를 먼저 처리하고 전체질의를 처리한다.

부속질의는 SQL문이고 결과는 [ 단일행-단일열(1*1), 단일행-다중열(1*N), 다중행-단일열(N*1), 다중행-다중열(N*N) ]
부속질의의 결과가 다중행-단일열로 여러 개의 값을 반환하면 앞에서 배운 IN 키워드를 사용한다.

ex) 도서를 구매한 적이 있는 고객의 이름을 검색하시오.
SELECT name FROM Customer WHERE custid IN (SELECT custid FROM Orders) ;

세 개 이상의 중첩된 부속질의도 가능함.

-- 대한미디어에서 출판한 도서를 구매한 고객의 이름을 보이시오.
-- Customer / Book / Orders

SELECT name
FROM Customer
WHERE custid IN ( SELECT custid
                          FROM Orders
                          WHERE bookid IN ( SELECT bookid
                                                     FROM Book
                                                     WHERE publisher = '대한미디어'));

1. 마지막 SELECT 문에서는 대한미디어에서 출판한 도서의 bookid를 구한다.
2. 가운데 SELECT 문에서는 bookid를 주문한 고객의 custid를 구한다.
3. 첫번째 SELECT 문에서는 찾은 custid에 대한 name을 구한다.

부속질의 간에는 상하 관계가 있고, 실행 순서는 하위 부속질의를 먼저 실행하고 그 결과를 이용하여 상위 부속질의를 실행한다.
반면 상관 부속질의(correlated subquery)는 상위 부속질의의 투플(행/row)을 이용하여 하위 부속질의를 계산한다.
상위 부속질의와 하위 부속질의가 독립적이지 않고 서로 관련을 맺고 있다.
 
*/





