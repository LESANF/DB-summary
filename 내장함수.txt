https://gent.tistory.com/194 - 오라클 함수 모음

SQL의 함수는 크게 두 가지로 나뉜다.
DMBS가 제공하는 내장 함수와 사용자가 필요에 따라 직접 만드는 사용자 정의 함수

[ SQL 내장 함수 ]
SQL 내장 함수는 상수나 속성 이름을 입력 값으로 받아 단일 값을 결과로 반환한다.
모든 내장 함수는 최초에 선언될 때, 유효한 입력 값을 받아야 한다.
내장 함수는 SELECT, WHERE, UPDATE-SET 절 등에 모두 사용 가능하다.

[ 숫자 함수 ]
SQL 문에서는 수학의 기본적인 사칙 연산자(+, -, *, /)와 나머지(%) 연산자 기호를 그대로 사용한다.

ABS(숫자) - 숫자의 절대값을 계산 ABS(-4.5)=4.5
CEIL(숫자) - 숫자보다 크거나 같은 최소의 정수 CEIL(4.1)=5
FLOOR(숫자) - 숫자보다 작거나 같은 최소의 정수 FLOOR(4.1)=4
ROUND(숫자, m) - 숫자의 반올림, m은 반올림 기준 자릿수 ROUND(5.36, 1)=5.40
LOG(n, 숫자) - 숫자의 자연로그 값을 반환 LOG(10)=2.30259
POWER(숫자, n) - 숫자의 n제곱 값을 계산 POWER(2, 3)=8
SQRT(숫자) - 숫자의 제곱근 값을 계산(숫자는 양수) SQRT(9.0)=3.0
SIGN(숫자) - 숫자가 음수면 -1, 0이면 0, 양수면 1 SIGN(3.45)=1

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q1. -78, +78의 절대값을 구하시오
SELECT ABS(-78), ABS(+78)
FROM DUAL;

결과값은 둘다 78이 나올거고 여기서 사용되는 DUAL 테이블은 일시적인 연산 작업에 사용하기 위해 만든 가상의 테이블이다.

Q2. 4.875를 소수 첫째 자리까지 반올림한 값을 구하시오
SELECT ROUND(4.875, 1)
FROM DUAL;

Q3. 고객별 평균 주문금액을 백원 단위로 반올림한 값을 구하시오
SELECT custid "고객번호", ROUND(SUM(saleprice)/COUNT(*), -2) "평균금액"
FROM Orders
GROUP BY custid;

< ROUND / TRUNC >

ROUND(n, m) 함수는 반올림값을 반환하는 함수다. n값을 반올림하고, m은 끊어줄 즉 보여줄 소수점

SELECT ROUND(192.153) AS BANOLIM FROM DUAL; -- 192
 
SELECT ROUND(192.153,1) AS BANOLIM FROM DUAL; -- 192.2
 
SELECT ROUND(192.153,-1) AS BANOLIM FROM DUAL; -- 190
 
SELECT ROUND(192.153,-2) AS BANOLIM FROM DUAL; -- 200

m 위치를 생략할 경우는 정수부분까지 반올림하여 표시한다.

반올림의 위치를 찾기 힘들경우 소수점(.)을 기준으로 확인하면 된다. 

m의 숫자가 양수이면 소수점을 기준으로 우측 m번째 자리까지 보여준다는 의미(우측까지의 값이 반올림)

m의 숫자가 음수이면 소수점을 기준으로 왼쪽 m번째에서 반올림이 일어남.

TRUNC(n, m) 함수는 절사하여 값을 반환하는 함수다. n값을 절사하고 m은 보여줄 소수점 자릿수

절사란, 반올림 내림 올림 이런거 없이 무조건 잘라내는 것을 말한다.

SELECT TRUNC(7.55992,2) AS "TRUNC" FROM DUAL; -- 7.55
 
SELECT TRUNC(789.547,-2) AS "TRUNC" FROM DUAL; -- 700

m의 숫자가 양수이면 소수점을 기준으로 우측 m번째 자리까지 보여준다는 의미

m의 숫자가 음수이면 소수점을 기준으로 왼쪽 m번째에서 절사가 일어난다.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ 문자 함수 ]
문자 함수는 주로 CHAR나 VARCHAR2의 데이터 타입을 대상으로 단일 문자나 문자열을 가공한 결과를 반환한다.

<문자값 반환 함수 - s : 문자열, c : 문자, n : 정수, k : 정수>

CHR(k) - 정수 아스키 코드를 문자로 반환 CHR(68)='D'

CONCAT(s1, s2) - 두 문자열을 연결 CONCAT('마당', '서점')='마당 서점'

INITCAP(s) - 문자열의 첫 번째 알파벳을 대문자로 변환 INITCAP('the soap')='The Soap'

LOWER(s) - 대상 문자열을 모두 소문자로 변환 LOWER('MR.SCOTT')='mr.scott'

UPPER(s) - 대상 문자열을 모두 대문자로 변환 UPPER('mr. scott')='MR. SCOTT'

LPAD(s,n,c) - 대상 문자열의 왼쪽부터 지정한 자리 수까지 지정한 문자로 채움 LPAD('Page 1', 10, '*')='****Page 1'

RPAD(s,n,c) - 대상 문자열의 오른쪽부터 지정한 자리 수까지 지정한 문자로 채움 RPAD('AbC', 5, '*')='AbC**'

LTRIM(s1, s2) - 대상 문자열의 왼쪽부터 지정한 문자들을 제거, 제거할 문자를 입력하지 않으면 공백제거 LTRIM('<==>BROWNING<==>', '<>=')='BROWNING<==>' 

RTRIM(s1, s2) - 대상 문자열의 오른쪽부터 지정한 문자들을 제거, 제거할 문자를 입력하지 않으면 공백제거 RTRIM('<==>BROWNING<==>','<>=')='<==>BROWNING'

TRIM(c FROM s) - 대상 문자열의 양쪽에서 지정된 문자를 삭제(문자열만 넣으면 기본값으로 공백제거) TRIM('='FROM'==>BROWNING<==')='>BROWNING<'
-> TRIM에 대한 옵션 https://mine-it-record.tistory.com/60

REPLACE(s1, s2, s3) - 대상 문자열의 지정한 문자를 원하는 문자로 변경 REPLACE('JACK and JUE', 'J', 'BL')='BLACK AND BLUE'

SUBSTR(s,n,k) - 대상 문자열의 지정된 자리에서부터 지정된 길이만큼 잘라서 반환, 문자열, 시작위치, 문자길이 SUBSTR('ABCDEFG', 3, 4)='CDEF' / 시작위치를 0으로 잡으면 알아서 1로잡힘. / 3번째 요소를 1보다 작은값으로 넣으면 NULL로 나옴.

< 숫자값 반환 함수 >

ASCII(c) 대상 알파벳 문자의 아스키 코드 값을 반환 ASCII('D')=68

INSTR(s1, s2, n , k) - 문자열 중 n번째 문자부터 시작하여 찾고자 하는 문자열 s2가 k번째 나타나는 문자열 위치 반환, 예제에서 3번째 OR가 2번째 나타나는 자리수
                          INSTR('CORPORATE FLOOR', 'OR', 3, 2)=14, 시작지점을 음수값으로도 줄 수 있음. -7인경우 왼쪽으로 7이동하고 다음 검색도 왼쪽으로만 검색됨.

LENGTH(s) - 대상 문자열의 글자 수를 반환 LENGTH('CANDIDE')=7, LENGTHB는 바이트를 나타냄.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ 날짜 · 시간 함수 ] 

테이터베이스에는 날짜를 지정하는 경우가 많다. 날짜는 단순히 문자열로 저장하여 관리할 수도 있지만 날짜형 데이터로 저장하여 관리하면 편리하다.
날짜를 더하거나 차이를 구하는 등의 연산을 손쉽게 처리할 수 있음.
날짜와 시간 부분을 나타내는 인수는 'datetime'으로 표기한다. datetime은 날짜와 시간 부분을 표기하기 위해 특별한 규칙을 갖는다. 년도는 YYYY, 두자리는 YY 이런식으로
날짜 · 시간 함수는 날짜형(DATE) 데이터를 가진 열을 대상으로 연산을 수행하며, 문자형(CHAR, VARCHAR2) 데이터와 날짜형 데이터간 연산을 수행할 때는 TO_CHAR 함수를 사용하여 문자형으로 변환한 후 연산 수행.

TO_DATE(char, datetime) - 반환형(DATE), 문자형(CHAR) 데이터를 날짜형(DATE)으로 반환 TO_DATE('2014-02-14', 'yyyy-mm-dd')=2014-02-14

TO_CHAR(date, datetime) - 반환형(CHAR), 날짜형(DATE) 데이터를 문자열(VARCHAR2)로 반환 TO_CHAR(TO_DATE('2014-02-14', 'yyyy-mm-dd'), 'yyyymmdd')='20140214'

ADD_MONTHS(date, 숫자) - 반환형(DATE), date 형의 날짜에서 지정한 달만큼 더함(1: 다음달, -1: 이전달) ADD_MONTH(TO_DATE('2014-02-14', 'yyyy-mm-dd'), 12)=2014-02-28

LAST_DAY(date) - 반환형(DATE), date 형의 날짜에서 달의 마지막 날을 반환 LAST_DAY(TO_DATE('2014-02-14', 'yyyy-mm-dd'))=2014-02-28

SYSDATE - 반환형(DATE), DBMS 시스템상의 오늘 날짜를 반환하는 인자없는 함수 SYSDATE=14/04/20

날짜형 데이터는 '-', '+'를 사용하여 원하는 날짜로부터 이전(-)과 이후(+)를 계산할 수 있다.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ NULL 값 처리 ]

NULL 값이란 아직 지정되지 않은 값을 말한다. 지정되지 않았다는 것은 값을 알 수도 없고, 적용할 수도 없다는 뜻이다.
NULL 값에 대한 처리는 실제 프로그래밍 과정에서 실수하기 쉬우므로 주의해야 한다. 
NULL 값은 '0', ''(빈문자), ' '(공백) 등과 다른 특별한 값임을 명심해야한다. NULL 값은 비교 연산자로 비교가 불가능하다.
NULL 값은 지정되지 않은 값이므로 =, <> 등과 가은 연산자로 비교하지 못한다. 
NULL 값의 연산을 수행하면 결과역시 NULL 값으로 반환된다.

NULL 값에 대한 연산과 집계 함수 - 집계 함수를 사용할 때 NULL 값이 포함된 행에 대하여 다음과 같은 주의가 필요.
- 'NULL+숫자' 연산의 결과는 NULL
- 집계 함수 계산 시 NULL이 포함된 행은 집계에서 빠진다.
- 해당되는 행이 하나도 없을 경우 SUM, AVG 함수의 결과는 NULL이 되며, COUNT 함수의 결과는 0이다.

< NVL 함수 / NVL2 함수>

NVL()은 NULL 값을 다른 값으로 대치하여 연산하거나 다른 값으로 출력하는 함수다.
NVL함수를 사용하면 NULL 값을 임의의 다른 값으로 변경할 수 있다.
NUL(속성, 값) - 속성 값이 NULL 이면 값으로 대치한다.

NVL2(값, 지정값1, 지정값2) - NULL이 아닌경우 지정값1을 출력하고, NULL인 경우 지정값2을 출력 한다.
