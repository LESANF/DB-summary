[ SELECT 문 ]

★ 들어가기 앞서 쿼리 실행순서

SELECT          -(5)
 FROM          -(1)
WHERE         -(2)
GROUP BY     -(3)
HAVING        -(4)
ORDER BY      -(6)

< WHERE 조건 >

비교  ( =, <>, <, <=, >, >= )
ex) price > 20000

============================================================================

범위 BETWEEN 
ex) price BETWEEN 10000 AND 20000
BETWEEN은 논리 연산자인 AND를 사용하여 아래와 같이 사용가능
SELECT * FROM BOOK WHERE PRICE >= 10000 AND PRICE <= 20000;

============================================================================

집합 IN, NOT IN 
ex) price IN(10000, 20000, 30000)
범위가 아니라 가격이 정확히 10000, 20000, 30000인 항목을 가져오는것.
price NOT IN(10000, 20000, 30000) 이면 해당 가격과 다른 모든 항목을 가져옴.

============================================================================

패턴 LIKE

/* 와일드 문자란 ? */

( +, %. [ ]. [^], _ ) 를 의미한다.

+ 는 문자열을 연결, '골프 ' + '바이블' : '골프 바이블 (공백도 인식됨)

%는 0개 이상의 문자열과 일치, '%축구%' : 축구를 포함하는 문자열

[ ]는 1개의 문자와 일치, '[0-5]%' : 0-5 사이 숫자로 시작하는 문자열

[^]는 1개의 문자와 불일치, '[^0-5]%' : 0-5 사이 숫자로 시작하지 않는 문자열

_는 특정 위치의 1개의 문자와 일치, '_구%' : 두 번째 위치에 '구'가 들어가는 문자열

ex) 축구, 야구, 배구와 같이 두 번째 글자에 '구'가 들어가는 도서를 찾을 때의 쿼리문
select * from Book where bookname like '_구%';   

ex) bookname LIKE '축구의역사' 
"" 안됨 무조건 영문 작은 따옴표(' ')안에 넣어야함.
(" ") 큰따옴표를 쓰는경우는 별칭(AS) 이름에 공백이 포함되는 경우에 반드시 사용된다.
LIKE는 %(와일드문자)와 같이 사용할 수 있는데, %는 아무 문자열이나 대신하는 기호임.

1. select * from table_name where title like '블로그%'
2. select * from table_name where title like '%블로그'
3. select * from table_name where title like '%블로그%'

1번 구문은 블로그로 시작되는 모든 값을 검색하여 가져오고
2번 구문은 블로그로 끝나는 모든 값을 검색하여 가져오고
3번 구문은 블로그가 들어있는 모든 값을 검색하여 가져옵니다

============================================================================

복합조건 AND, OR, NOT
ex) (price < 20000) AND (bookname LIKE '축구의 역사')
소괄호 안써도 동작함. 구분을 위해 넣는게 좋아보임.

출판사가 '굿스포츠' 혹은 '대한미디어'인 도서를 찾을 때 
select * from book where publisher='굿스포츠' or 'publisher='대한미디어'; 나 where publisher like '%굿스포츠%' or publisher like '%대한미디어%'
로도 가능하지만 앞에서 배운 IN을 사용하면 간결하게 찾을 수 있음. where publisher IN ('굿스포츠', '대한미디어');

============================================================================

ORDER BY
SQL문의 실행 결과 행의 순서는 각 DBMS에 저장된 위치에 따라 결정됨. 
SQL문의 실행결과를 특정 순서대로 출력하고 싶으면 ORDER BY절을 사용한다.

*오름차순(ASC) / 내림차순(DESC) 
따로 설정안해주면 ASC.

문자의 경우 정렬 순서는 숫자, 영문자, 한글 순서임.

ORDER BY price DESC, publisher ASC; 의 경우
가격은 내림차순, 출판사는 오름차순인데 먼저 호출된 price열을 정렬후 동일한 값에 의하여 두번째 publisher열이 처리된다.

============================================================================

GROUP BY
'운영자'가 필요로 하는 질의를 중심으로 SQL의 기능을 살펴본다.
운영자는 도서 판매 총액, 일별 판매량등 도서 판매에 도움이 되는 집계된 정보를 필요로함
집계나 통계나 비슷한 의미지만 집계라는 용어를 사용하는게 낫다.
집계를 하기위해서는 GROUP BY문을 사용하고 구체적인 집계 내용은 집계 함수를 사용함.

/* Oracle NVL, NVL2 함수 */ 
NULL 값을 지정값으로 바꿔주는 함수
https://gent.tistory.com/189

/* ROUND 함수 */
소수점 자리수를 지정하기 위한 함수
https://gent.tistory.com/241

/* 집계 함수 */
집계 함수는 테이블의 각 열(COLUMN)에 대해 계산하는 함수로 (SUM, AVG, MIN, MAX, COUNT)의 다섯 가지가 있음.
WHERE 절에서는 집계함수 사용 못함.

고객이 주문한 도서의 총 판매액을 구할 때
select SUM(saleprice) from Orders; 로 가능함. madang스키마에 Orders테이블이 있음.
이렇게 하면 새로운 SUM(saleprice)로 새로운 결과열이 생성되는데. 
속성의이름 즉 별칭을 지정하기 위해서는 아래와 같이 쓰면됨.
select SUM(saleprice) AS "총매출" from Orders;

마찬가지로 where 절을 부여하여 조건을 달아줄 수 있음.
SELECT SUM(SALEPRICE) AS "총 판매액", AVG(SALEPRICE) AS "평균값", MIN(SALEPRICE) AS "최저가", MAX(SALEPRICE) AS "최고가" FROM Orders
집계 함수를 여러개 같이 쓸 수도 있음.

COUNT는 행(row)의 개수를 센다. COUNT(*), '*' 또는 특정 속성의 이름이 사용된다.
COUNT(publisher)는 출판사의 수, COUNT(DISTINCT publisher)는 중복을 제거한 출판사의 수로 사용된다.
개수를 셀 때는 NULL 값은 제외한다.

문법에서 '[ ]'는 선택을 나타내며 '|'는 둘 중 하나를 선택하라는 의미이다.
함수([ALL | DISTINCT] 속성이름) 이런식으로 사용됨. 전부 OR 중복제거라는 옵션임.

GROUP BY절은 SQL에서 속성 값이 같은 값끼리 그룹을 만들 수 있다.
나누고자 하는 그룹의 컬럼명을 SELECT절과 GROUP BY절 뒤에 추가하면 된다.

GROUP BY절은 ORDER BY절과 같이 쓰일 수 있으며 ORDER BY절 앞에 쓰인다.

select custid, SUM(SALEPRICE) AS "총판매액", COUNT(*) AS "도서수량" from orders GROUP BY custid;
다음은 고객별로 주문한 도서의 총 수량과 총 판매액이다.

COUNT(*)는 튜플(행=ROW)의 개수를 세어주는데, GROUP BY custid되었으므로 
custid를 기준으로 그룹이 만들어져 custid(1, 2, 3, 4)별로 4개의 그룹이 만들어지고 해당 그룹에 대한 도서수량, 총판매액이 부여된다.

HAVING 절은 집계함수를 가지고 조건 비교를 할 때 사용되며, GROUP BY절과 함께 사용된다(WHERE 절에서는 사용할 수 없기 때문에)

SELECT custid, COUNT(*) AS "주문도서"
FROM Orders
WHERE saleprice>=8000
GROUP BY custid
HAVING COUNT(*)>=2
ORDER BY custid

위의 쿼리문은 가격이 8,000원 이상인 도서를 구매한 고객에 대하여 고객별 주문 도서의 총 수량을 구한것이다 (두 권 이상 구매한 고객만)
GROUP BY를 custid기준으로 해줬기 때문에 SELECT문에서는 custid와 집계함수만 나올 수 있다.

WHERE, HAVING을 같이 쓰이는 경우의 주의점은 HAVING은 반드시 GROUP BY와 같이 쓰여야 하고 WHERE 뒤에 위치해야한다. 마지막으로 검색조건 에는 집계함수가 와야함.

============================================================================

